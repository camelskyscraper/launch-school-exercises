Exercise:
Consider the following method and a call to that method:

def my_method(a, b = 2, c = 3, d)
  p [a, b, c, d]
end

my_method(4, 5, 6)
Use the ruby documentation to determine what this code will print.

Answer:
Error, because there are not enough arguments and the fourth parameter does not have a default value.
Looked it up: https://ruby-doc.org/core-2.4.0/doc/syntax/calling_methods_rdoc.html#label-Default+Positional+Arguments

I was wrong!

It will print [4, 5, 3, 6]
"First 4 is assigned to a, then 6 is assigned to d. This leaves only the arguments with default values. Since 5 has not been assigned to a value yet, it is given to b and c uses its default value of 3."
So, ruby assigns the arguments to parameters without defaults first left to right, then fills in the missing arguments going left to right.
If there aren't enough arguments to fill in the parameters without defaults then an error is returned.